# Generated by Django 5.1.7 on 2025-04-03 10:27

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant universel unique (UUIDv4)', primary_key=True, serialize=False, verbose_name='ID unique')),
                ('email', models.EmailField(error_messages={'unique': 'Un compte existe déjà avec cet email.'}, help_text='Adresse email utilisée comme identifiant de connexion', max_length=254, unique=True, verbose_name='adresse email')),
                ('first_name', models.CharField(help_text="Prénom de l'utilisateur (requis)", max_length=150, verbose_name='prénom')),
                ('last_name', models.CharField(help_text="Nom de famille de l'utilisateur (requis)", max_length=150, verbose_name='nom')),
                ('is_staff', models.BooleanField(default=False, help_text="Détermine si l'utilisateur peut accéder à l'interface d'administration", verbose_name='membre du staff')),
                ('is_superuser', models.BooleanField(default=False, help_text="Détermine si l'utilisateur a toutes les permissions sans attribution explicite", verbose_name='super-utilisateur')),
                ('is_active', models.BooleanField(default=True, help_text='Désigne si ce compte doit être considéré comme actif. Désélectionnez cette option plutôt que de supprimer le compte.', verbose_name='actif')),
                ('date_joined', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création du compte', verbose_name="date d'inscription")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'utilisateur',
                'verbose_name_plural': 'utilisateurs',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, help_text='Numéro de téléphone au format international', max_length=20, null=True, verbose_name='téléphone')),
                ('address', models.TextField(blank=True, help_text='Adresse complète avec code postal et ville', null=True, verbose_name='adresse postale')),
                ('user', models.OneToOneField(help_text='Compte utilisateur de base associé à ce client', on_delete=django.db.models.deletion.CASCADE, related_name='client_profile', to=settings.AUTH_USER_MODEL, verbose_name='compte utilisateur')),
            ],
            options={
                'verbose_name': 'client',
                'verbose_name_plural': 'clients',
                'ordering': ['-user__date_joined'],
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Prénom du prospect', max_length=150, verbose_name='prénom')),
                ('last_name', models.CharField(help_text='Nom de famille du prospect', max_length=150, verbose_name='nom')),
                ('email', models.EmailField(blank=True, help_text='Adresse email du prospect (optionnelle)', max_length=254, null=True, verbose_name='email')),
                ('phone', models.CharField(help_text='Numéro de téléphone au format international (ex: +33612345678)', max_length=20, verbose_name='téléphone')),
                ('appointment_date', models.DateTimeField(blank=True, help_text='Date et heure du rendez-vous (optionnel)', null=True, verbose_name='date de rendez-vous')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de création du lead', verbose_name='date de création')),
                ('status', models.CharField(choices=[('NOUVEAU', 'Nouveau'), ('NRP', 'NRP'), ('NRP++', 'NRP ++'), ('NRP+MESSAGE', 'NRP+MESSAGE'), ('CLIENT_RAPPELLERA', 'Client rappellera'), ('PRESENT', 'Présent'), ('PAYE', 'Payé'), ('DOSS_EN_COURS', 'Dossier en cours'), ('FAUX_NUMERO', 'Faux numéro'), ('PAS_INTERRESSE', 'Pas intéressé'), ('RDV_PLANIFIER', 'Rendez-vous planifié'), ('RDV_CONFIRME', 'Rendez-vous confirmé'), ('ATTENTE_REGLEMENT', 'Attente règlement'), ('FORMULAIRE_OK', 'Formulaire OK'), ('ANNULE', 'Annulé'), ('ELLIGIBLE', 'Eligible'), ('PAS_DE_REPONSE', 'Pas de réponse'), ('SOUCIS_FINANCIER', 'Soucis financier'), ('DIFFICULTE_FINANCIERE', 'Difficulté financière'), ('ABSENT', 'Absent'), ('REVIENDRA', 'Reviendra'), ('A_RAPPELER', 'A rappeler'), ('PIECES_MANQUANTES', 'Pièce(s) manquante(s)')], default='NOUVEAU', help_text='Statut actuel du lead', max_length=30, verbose_name='statut')),
                ('assigned_to', models.ForeignKey(blank=True, help_text='Conseiller à qui ce lead est assigné', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='assigné à')),
            ],
            options={
                'verbose_name': 'lead',
                'verbose_name_plural': 'leads',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Contenu')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Auteur')),
                ('lead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.lead', verbose_name='Lead associé')),
            ],
            options={
                'verbose_name': 'Commentaire',
                'verbose_name_plural': 'Commentaires',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_type', models.CharField(choices=[('ADMIN', 'Administrateur'), ('CONSEILLER', 'Conseiller'), ('COMMERCIAL', 'Commercial'), ('CLIENT', 'Client'), ('ACCUEIL', "Agent d'accueil")], help_text="Rôle fonctionnel attribué à l'utilisateur", max_length=20, verbose_name='type de rôle')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création de ce rôle', verbose_name='date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification de ce rôle', verbose_name='date de modification')),
                ('user', models.OneToOneField(help_text='Utilisateur auquel ce rôle est attribué', on_delete=django.db.models.deletion.CASCADE, related_name='role', to=settings.AUTH_USER_MODEL, verbose_name='utilisateur associé')),
            ],
            options={
                'verbose_name': 'rôle',
                'verbose_name_plural': 'rôles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='email_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['date_joined'], name='date_joined_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['status'], name='lead_status_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['appointment_date'], name='lead_appointment_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['created_at'], name='lead_created_idx'),
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['role_type'], name='role_type_idx'),
        ),
    ]
