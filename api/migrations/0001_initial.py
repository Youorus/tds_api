# Generated by Django 5.1.7 on 2025-04-24 14:45

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant universel unique (UUIDv4)', primary_key=True, serialize=False, verbose_name='ID unique')),
                ('email', models.EmailField(error_messages={'unique': 'Un compte existe déjà avec cet email.'}, help_text='Adresse email utilisée comme identifiant de connexion', max_length=254, unique=True, verbose_name='adresse email')),
                ('first_name', models.CharField(help_text="Prénom de l'utilisateur (requis)", max_length=150, verbose_name='prénom')),
                ('last_name', models.CharField(help_text="Nom de famille de l'utilisateur (requis)", max_length=150, verbose_name='nom')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrateur'), ('ACCUEIL', 'Accueil'), ('JURISTE', 'Juriste'), ('CONSEILLER', 'Conseiller'), ('COMPTABILITE', 'Comptabilité')], default='CONSEILLER', help_text='Rôle du collaborateur', max_length=32, verbose_name='rôle')),
                ('is_staff', models.BooleanField(default=False, help_text="Détermine si l'utilisateur peut accéder à l'interface d'administration", verbose_name='membre du staff')),
                ('is_superuser', models.BooleanField(default=False, help_text="Détermine si l'utilisateur a toutes les permissions sans attribution explicite", verbose_name='super-utilisateur')),
                ('is_active', models.BooleanField(default=True, help_text='Désigne si ce compte doit être considéré comme actif. Désélectionnez cette option plutôt que de supprimer le compte.', verbose_name='actif')),
                ('date_joined', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création du compte', verbose_name="date d'inscription")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'utilisateur',
                'verbose_name_plural': 'utilisateurs',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Prénom du prospect', max_length=150, verbose_name='prénom')),
                ('last_name', models.CharField(help_text='Nom de famille du prospect', max_length=150, verbose_name='nom')),
                ('email', models.EmailField(blank=True, help_text='Adresse email du prospect (optionnelle)', max_length=254, null=True, verbose_name='email')),
                ('phone', models.CharField(help_text='Numéro de téléphone au format international (ex: +33612345678)', max_length=20, verbose_name='téléphone')),
                ('appointment_date', models.DateTimeField(blank=True, help_text='Date et heure du rendez-vous (optionnel)', null=True, verbose_name='date de rendez-vous')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de création du lead', verbose_name='date de création')),
                ('status', models.CharField(choices=[('NOUVEAU', 'Nouveau'), ('NRP', 'NRP'), ('NRP++', 'NRP ++'), ('NRP+MESSAGE', 'NRP+MESSAGE'), ('CLIENT_RAPPELLERA', 'Client rappellera'), ('PRESENT', 'Présent'), ('PAYE', 'Payé'), ('DOSS_EN_COURS', 'Dossier en cours'), ('FAUX_NUMERO', 'Faux numéro'), ('PAS_INTERRESSE', 'Pas intéressé'), ('RDV_PLANIFIER', 'Rendez-vous planifié'), ('RDV_CONFIRME', 'Rendez-vous confirmé'), ('ATTENTE_REGLEMENT', 'Attente règlement'), ('FORMULAIRE_OK', 'Formulaire OK'), ('ANNULE', 'Annulé'), ('ELLIGIBLE', 'Eligible'), ('PAS_DE_REPONSE', 'Pas de réponse'), ('SOUCIS_FINANCIER', 'Soucis financier'), ('DIFFICULTE_FINANCIERE', 'Difficulté financière'), ('ABSENT', 'Absent'), ('REVIENDRA', 'Reviendra'), ('A_RAPPELER', 'A rappeler'), ('PIECES_MANQUANTES', 'Pièce(s) manquante(s)')], default='NOUVEAU', help_text='Statut actuel du lead', max_length=30, verbose_name='statut')),
                ('assigned_to', models.ForeignKey(blank=True, help_text='Conseiller à qui ce lead est assigné', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='assigné à')),
            ],
            options={
                'verbose_name': 'lead',
                'verbose_name_plural': 'leads',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Contenu')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Auteur')),
                ('lead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.lead', verbose_name='Lead associé')),
            ],
            options={
                'verbose_name': 'Commentaire',
                'verbose_name_plural': 'Commentaires',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('civilite', models.CharField(blank=True, choices=[('MADAME', 'Madame'), ('MADEMOISELLE', 'Mademoiselle'), ('MONSIEUR', 'Monsieur')], max_length=15, verbose_name='civilité')),
                ('date_naissance', models.DateField(blank=True, null=True, verbose_name='date de naissance')),
                ('lieu_naissance', models.CharField(blank=True, max_length=255, verbose_name='lieu de naissance')),
                ('pays', models.CharField(blank=True, max_length=100, verbose_name='pays')),
                ('nationalite', models.CharField(blank=True, max_length=100, verbose_name='nationalité')),
                ('adresse', models.CharField(blank=True, max_length=255, verbose_name='adresse')),
                ('code_postal', models.CharField(blank=True, max_length=20, verbose_name='code postal')),
                ('ville', models.CharField(blank=True, max_length=100, verbose_name='ville')),
                ('date_entree_france', models.DateField(blank=True, null=True, verbose_name='date d’entrée en France')),
                ('a_un_visa', models.BooleanField(blank=True, null=True, verbose_name='visa')),
                ('type_visa', models.CharField(blank=True, choices=[('SCHENGEN', 'Visa Schengen'), ('LONG_SEJOUR', 'Visa long séjour'), ('ETUDIANT', 'Visa étudiant'), ('VLS_TS', 'VLS-TS'), ('AUTRE', 'Autre')], max_length=20, verbose_name='type de visa')),
                ('statut_refugie_ou_protection', models.BooleanField(blank=True, null=True, verbose_name='statut réfugié ou protection subsidiaire')),
                ('types_demande', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('TITRE_SEJOUR', 'Titre de séjour (1ère demande)'), ('RENOUVELLEMENT', 'Renouvellement titre de séjour'), ('NATURALISATION', 'Naturalisation'), ('DEMANDE_VISA', 'Demande de visa'), ('REGROUPEMENT_FAMILIAL', 'Regroupement familial'), ('CONTESTATION_OQTF', 'Contestation OQTF'), ('SUIVI_DOSSIER', 'Suivi de dossier'), ('PRISE_RDV', 'Prise de rendez-vous'), ('AUTRES', 'Autres (précisez)')], max_length=30), blank=True, default=list, size=None, verbose_name='types de demande')),
                ('demande_deja_formulee', models.BooleanField(blank=True, null=True, verbose_name='demande déjà formulée ?')),
                ('demande_formulee_precise', models.CharField(blank=True, max_length=255, verbose_name='si oui, laquelle ?')),
                ('situation_familiale', models.CharField(blank=True, choices=[('CELIBATAIRE', 'Célibataire'), ('MARIE', 'Marié(e)'), ('CONCUBIN', 'Concubin(e)'), ('DIVORCE', 'Divorcé(e)'), ('VEUF', 'Veuf(ve)')], max_length=20, verbose_name='situation familiale')),
                ('a_des_enfants', models.BooleanField(blank=True, null=True, verbose_name='a des enfants ?')),
                ('nombre_enfants', models.PositiveIntegerField(blank=True, null=True, verbose_name='nombre d’enfants')),
                ('nombre_enfants_francais', models.PositiveIntegerField(blank=True, null=True, verbose_name='nombre d’enfants français')),
                ('enfants_scolarises', models.BooleanField(blank=True, null=True, verbose_name='enfants scolarisés ?')),
                ('naissance_enfants_details', models.TextField(blank=True, verbose_name='détails naissance enfants')),
                ('situation_pro', models.CharField(blank=True, choices=[('CDI', 'En CDI'), ('CDD_INTERIM', 'En CDD / Intérim'), ('INDEPENDANT', 'Profession libérale / Indépendant'), ('ETUDIANT', 'Étudiant'), ('SANS_EMPLOI', 'Sans emploi')], max_length=30, verbose_name='situation professionnelle')),
                ('domaine_activite', models.CharField(blank=True, max_length=255, verbose_name='domaine d’activité')),
                ('nombre_fiches_paie', models.PositiveIntegerField(blank=True, null=True, verbose_name='nombre de fiches de paie')),
                ('date_depuis_sans_emploi', models.DateField(blank=True, null=True, verbose_name='depuis quelle date sans emploi / étudiant')),
                ('a_deja_eu_oqtf', models.BooleanField(blank=True, null=True, verbose_name='déjà eu une OQTF ?')),
                ('date_derniere_oqtf', models.DateField(blank=True, null=True, verbose_name='date de la dernière OQTF')),
                ('demarche_en_cours_administration', models.BooleanField(blank=True, null=True, verbose_name='démarche en cours auprès de l’administration ?')),
                ('remarques', models.TextField(blank=True, verbose_name='remarques')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='modifié le')),
                ('lead', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='form_data', to='api.lead')),
            ],
            options={
                'verbose_name': 'données client',
                'verbose_name_plural': 'données clients',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='email_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['date_joined'], name='date_joined_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['status'], name='lead_status_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['appointment_date'], name='lead_appointment_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['created_at'], name='lead_created_idx'),
        ),
    ]
